<launch>
    <!-- Run the architecture's component and test it based on random-based stimulus. -->

    <rosparam param="state/initial_pose"> [ 0.0,  0.0] </rosparam>

    <rosparam param="config/user_pose"> [ 5.0,  5.0] </rosparam>
    <rosparam param="config/environment_size"> [10.0, 10.0] </rosparam>
    <rosparam param="config/speech_commands"> ["Hello", "Bye"] </rosparam>

    <rosparam param="test/random_plan_points"> [2, 8] </rosparam>
    <rosparam param="test/random_plan_time"> [0.2, 0.8] </rosparam>
    <rosparam param="test/random_motion_time"> [0.1, 1.0] </rosparam>

    <rosparam param="test/random_sense/active"> True </rosparam>
    <rosparam param="test/random_sense/gesture_time"> [2.0, 10.0] </rosparam>
    <rosparam param="test/random_sense/speech_time"> [2.0, 30.0] </rosparam>
    <rosparam param="test/random_sense/battery_time"> [15.0, 40.0] </rosparam>


    <node pkg = "robot_smach"  
          type = "gesture.py"      
          name = "gesture"      
          output = "screen"
    > </node>

    <node pkg = "robot_smach"  
          type = "speech.py"
          name = "speech"
          output = "screen"
    > </node>

    <node pkg = "robot_smach"  
          type = "robot_states.py" 
          name = "robot_states"
          output = "screen"
    > </node>
    
    <node pkg = "robot_smach"  
          type = "planner.py"
          name = "planner"
          output = "screen"
    > </node>
    
    <node pkg = "robot_smach"  
          type = "controller.py"
          name = "controller"
          output = "screen"
    > </node>
</launch>
